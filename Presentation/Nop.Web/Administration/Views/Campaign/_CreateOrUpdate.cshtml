@model CampaignModel

@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)
@if (Model.Id > 0)
{
    <table class="adminContent">
        <tr>
            <td colspan="2">
                <strong>
                    @T("Admin.Promotions.Campaigns.Warning")
                </strong>
                <br />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.TestEmail):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.TestEmail)
                @Html.ValidationMessageFor(model => model.TestEmail)
                &nbsp;&nbsp;
                <input type="submit" name="send-test-email" class="k-button" value="@T("Admin.Promotions.Campaigns.SendTestEmail")" />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
            </td>
            <td class="adminData">
                <input type="submit" name="send-mass-email" class="k-button" value="@T("Admin.Promotions.Campaigns.SendMassEmail")" />
            </td>
        </tr>
    </table>
    <hr />
}
<table class="adminContent">
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Name):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Subject):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.Subject)
            @Html.ValidationMessageFor(model => model.Subject)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Body):
        </td>
        <td class="adminData">
            @{
                //we use rich editor with BODY tag supported
                //it could be a better practice to implement one more editor (similar to RichEditor.cshtml)
                //with "enableFullPage" property set to "true". but we do not want to duplicate source code
                //that's why we use this workaround
                //we store a value into "ViewData" and then use it in the RichEditor.cshtml file
                ViewData["nop.RichEditor.EnableFullPage"] = true;
            }
            @Html.EditorFor(model => model.Body, "RichEditor")
            @Html.ValidationMessageFor(model => model.Body)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.StoreId):
        </td>
        <td class="adminData">
            @Html.DropDownListFor(model => model.StoreId, Model.AvailableStores)
            @Html.ValidationMessageFor(model => model.StoreId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.AllowedTokens):
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.AllowedTokens)
        </td>
    </tr>
</table>
