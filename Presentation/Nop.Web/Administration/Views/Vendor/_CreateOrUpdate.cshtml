@model VendorModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)


<script>
    $(document).ready(function () {
        $("#vendor-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="vendor-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Vendors.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Common.SEO")
        </li>
        @if (Model.Id > 0)
        {
            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                @T("Admin.Vendors.VendorNotes")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabSeo()
    </div>
    @if (Model.Id > 0)
    {
        <div>
            @TabVendorNotes()
        </div>
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "vendor-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">







@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function() {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    @(Html.LocalizedEditor<VendorModel, VendorLocalizedModel>("vendor-info-localized",
          @<table class="adminContent">
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Locales[item].Name):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(model => model.Locales[item].Name)
                       @Html.ValidationMessageFor(model => model.Locales[item].Name)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Locales[item].Description):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                       @Html.ValidationMessageFor(model => model.Locales[item].Description)
                   </td>
               </tr>
               <tr>
                   <td colspan="2">
                       @Html.HiddenFor(model => model.Locales[item].LanguageId)
                   </td>
               </tr>
           </table>
        ,
          @<table class="adminContent">
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Name):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(model => model.Name)
                       @Html.ValidationMessageFor(model => model.Name)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Description):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(x => x.Description, "RichEditor")
                       @Html.ValidationMessageFor(model => model.Description)
                   </td>
               </tr>
           </table>
          ))
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>       
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.AssociatedCustomers):
                </td>
                <td class="adminData">
                    @if (Model.AssociatedCustomers.Count > 0)
                    {
                        for (int i = 0; i < Model.AssociatedCustomers.Count; i++)
                        {
                            @Html.ActionLink(Model.AssociatedCustomers[i].Email, "Edit", "Customer", new { id = Model.AssociatedCustomers[i].Id }, new {})
                            if (i != Model.AssociatedCustomers.Count - 1)
                            {
                                <text>, </text>
                            }
                        }
                    }
                    else
                    {
                        @T("Admin.Vendors.Fields.AssociatedCustomerEmails.None")
                    }
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PictureId)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.PictureId)
                @Html.ValidationMessageFor(model => model.PictureId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AdminComment):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AdminComment, new {style = "Width: 250px; Height: 150px;"})
                @Html.ValidationMessageFor(model => model.AdminComment)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AllowCustomersToSelectPageSize):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.AllowCustomersToSelectPageSize)
                @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
            </td>
        </tr>
        <tr id="pnlPageSize">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PageSize):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSize)
                @Html.ValidationMessageFor(model => model.PageSize)
            </td>
        </tr>
        <tr id="pnlPageSizeOptions">
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PageSizeOptions):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.PageSizeOptions)
                @Html.ValidationMessageFor(model => model.PageSizeOptions)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Active):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DisplayOrder):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </td>
        </tr>
    </table>
}
@helper TabSeo()
{
    @(Html.LocalizedEditor<VendorModel, VendorLocalizedModel>("vendor-seo-localized",
          @<table class="adminContent">
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Locales[item].MetaKeywords):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(model => model.Locales[item].MetaKeywords)
                       @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Locales[item].MetaDescription):
                   </td>
                   <td class="adminData">
                       @Html.TextAreaFor(model => model.Locales[item].MetaDescription)
                       @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Locales[item].MetaTitle):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(model => model.Locales[item].MetaTitle)
                       @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.Locales[item].SeName):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(model => model.Locales[item].SeName)
                       @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                   </td>
               </tr>
               <tr>
                   <td colspan="2">
                       @Html.HiddenFor(model => model.Locales[item].LanguageId)
                   </td>
               </tr>
           </table>
        ,
          @<table class="adminContent">
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.MetaKeywords):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(x => x.MetaKeywords)
                       @Html.ValidationMessageFor(model => model.MetaKeywords)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.MetaDescription):
                   </td>
                   <td class="adminData">
                       @Html.TextAreaFor(x => x.MetaDescription)
                       @Html.ValidationMessageFor(model => model.MetaDescription)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.MetaTitle):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(x => x.MetaTitle)
                       @Html.ValidationMessageFor(model => model.MetaTitle)
                   </td>
               </tr>
               <tr>
                   <td class="adminTitle">
                       @Html.NopLabelFor(model => model.SeName):
                   </td>
                   <td class="adminData">
                       @Html.EditorFor(x => x.SeName)
                       @Html.ValidationMessageFor(model => model.SeName)
                   </td>
               </tr>
           </table>))
}
@helper TabVendorNotes()
{
    <table class="adminContent">
        <tr>
            <td>
                <div id="vendornotes-grid"></div>

                <script>
                $(document).ready(function () {
                    $("#vendornotes-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("VendorNotesSelect", "Vendor", new { vendorId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                destroy: {
                                    url: "@Html.Raw(Url.Action("VendorNoteDelete", "Vendor", new { vendorId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        //do not implicitly specify all fields
                                        //we do it only for fields which implicitly require it
                                        //otherwise, they'll be formatted wrong way
                                        CreatedOn: {type: "date" }
                                    }
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            numeric: false,
                            previousNext: false,
                            info: false
                        },
                        editable: {
                            confirmation: false,
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [{
                            field: "CreatedOn",
                            title: "@T("Admin.Vendors.VendorNotes.Fields.CreatedOn")",
                            width: 200,
                            type: "date",
                            format: "{0:G}"
                        }, {
                            field: "Note",
                            title: "@T("Admin.Vendors.VendorNotes.Fields.Note")",
                            encoded: false
                        }, {
                            command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                            title: "@T("Admin.Common.Delete")",
                            width: 100
                        }]
                    });
                });
                </script>
            </td>
        </tr>
    </table>
    <p>
        <strong>
            @T("Admin.Vendors.VendorNotes.AddTitle")
        </strong>
    </p>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddVendorNoteMessage):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AddVendorNoteMessage, new { style = "Width: 350px; Height: 150px;" })
                @Html.ValidationMessageFor(model => model.AddVendorNoteMessage)
            </td>
        </tr>
        <tr>
            <td colspan="2" align="left">
                <input type="button" id="addVendorNote" class="k-button" value="@T("Admin.Vendors.VendorNotes.AddButton")" />
            </td>
        </tr>
    </table>

    <script type="text/javascript">
    $(document).ready(function () {
        $('#addVendorNote').click(function () {
            var vendorNoteMessage = $("#@Html.FieldIdFor(model => model.AddVendorNoteMessage)").val();
            $('#addVendorNote').attr('disabled', true);

            var postData = {
                message: vendorNoteMessage,
                vendorId: @Model.Id
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache:false,
                type: "POST",
                url: "@(Url.Action("VendorNoteAdd", "Vendor"))",
                data: postData,
                success: function (data) {
                    var grid = $("#vendornotes-grid").data('kendoGrid');
                    grid.dataSource.read();
                    $('#addVendorNote').attr('disabled', false);
                },
                error:function (xhr, ajaxOptions, thrownError){
                    alert('Failed to add vendor note.');
                    $('#addVendorNote').attr('disabled', false);
                }
            });
        });
    });
    </script>
}